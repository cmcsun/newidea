version: '2.1'
services:

    #
    # mender-iot-manager
    #
    mender-iot-manager:
        image: mendersoftware/iot-manager:mender-3.4.0
        extends:
            file: common.yml
            service: mender-base
        networks:
            - mender
            - web
        depends_on:
            - mender-mongo
        labels:
            mender.healthcheck.path: "/api/internal/v1/iot-manager/health"

    #
    # mender-deployments
    #
    mender-deployments:
        image: mendersoftware/deployments:mender-3.4.0
        extends:
            file: common.yml
            service: mender-base
        networks:
            - mender
            - web
        depends_on:
            - mender-mongo
        labels:
            mender.healthcheck.path: "/api/internal/v1/deployments/health"

    #
    # mender-gui
    #
    mender-gui:
        image: mendersoftware/gui:mender-3.4.0
        extends:
            file: common.yml
            service: mender-base
        networks:
            - mender
            - web
        environment:
            - GATEWAY_IP
            - INTEGRATION_VERSION
            - MENDER_ARTIFACT_VERSION
            - MENDER_VERSION
            - MENDER_DEB_PACKAGE_VERSION
            - HAVE_DEVICECONNECT=1
            - HAVE_DEVICECONFIG=1
    mender-api-gateway:
        image: traefik:latest
        ports:
          - "80:80"
          - "443:443"
          - "8080:8080"
        extends:
            file: common.yml
            service: mender-base
        # Enables the web UI and tells Traefik to listen to docker
        command:
            - --log.level=DEBUG
            - --accesslog=true
            - --api.insecure=true
            - "traefik.web.services.traefik-dashboard.loadbalancer.server.port=8080"
            - "traefik.web.routers.traefik-dashboard-http.entrypoints=web"
            - "traefik.web.routers.traefik-dashboard-http.rule=Host(`dashboard.localhost`)"
            - "traefik.docker.network=web"
            - --entrypoints.http.address=:80
            - --entrypoints.http.redirections.entryPoint.scheme=https
            - --entrypoints.http.redirections.entryPoint.to=https
            - --entrypoints.https.address=:443
            - --entryPoints.https.transport.respondingTimeouts.idleTimeout=7200
            - --entryPoints.https.transport.respondingTimeouts.readTimeout=7200
            - --entryPoints.https.transport.respondingTimeouts.writeTimeout=7200
            - --providers.docker=true
            - --providers.docker.network=web
            - --providers.file.directory=/etc/traefik/config
            - --log.level=DEBUG
            #  Enable ACME (Let's Encrypt): automatic SSL.
            - "--certificatesresolvers.letsencrypt.acme.email=ggmethos@autistici.org"
            - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
            - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
            - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
            # Global redirect to https
            - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
            - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
        labels:
            - "traefik.enable=true"
            - traefik.web.services.traefik-dashboard.loadbalancer.server.port=8080
            # Make Traefik use this domain in HTTP
            - traefik.web.routers.traefik-dashboard-http.entrypoints=web
            - traefik.web.routers.traefik-dashboard-http.rule=Host(`dashboard.localhost`)
            - "traefik.docker.network=web"
        volumes:
            # So that Traefik can listen to the Docker events
            - /var/run/docker.sock:/var/run/docker.sock:ro
            # Dynamic configuration files
            - ./config/traefik/traefik.yaml:/etc/traefik/config/traefik.yaml:ro
            - ./config/traefik/traefik.middlewares.yaml:/etc/traefik/config/traefik.middlewares.yaml:ro
            - ./letsencrypt:/letsencrypt
        networks:
            - mender
            - meshcentral-tier
            - web
        # critical - otherwise nginx may not detect
        # these servers and exits with 'upstream server not found'
        depends_on:
            - mender-device-auth
            - mender-gui
            - mender-useradm
            - mender-inventory



              #  service1:
              #image: your_service1_image
              #labels:
              # - "traefik.http.routers.service1.rule=Host(`mesh.sobe.name`)"
              # - "traefik.http.routers.service1.entrypoints=web"
              #- "traefik.http.services.service1.loadbalancer.server.port=YOUR_SERVICE1_PORT"

              #service2:
              #image: your_service2_image
              #labels:
              #- "traefik.http.routers.service2.rule=Host(`service2.yourdomain.com`)"
              #- "traefik.http.routers.service2.entrypoints=web"
              #- "traefik.http.services.service2.loadbalancer.server.port=YOUR_SERVICE2_PORT"



    #
    # mender-device-auth
    #
    mender-device-auth:
        image: mendersoftware/deviceauth:mender-3.4.0
        environment:
            DEVICEAUTH_ORCHESTRATOR_ADDR: http://mender-workflows-server:8080/
        extends:
            file: common.yml
            service: mender-base
        networks:
            - mender
            - web
        depends_on:
            - mender-mongo
            - mender-workflows-server
        labels:
            mender.healthcheck.path: "/api/internal/v1/devauth/health"

    #
    # mender-inventory
    #
    mender-inventory:
        image: mendersoftware/inventory:mender-3.4.0
        extends:
            file: common.yml
            service: mender-base
        networks:
            - mender
            - web
        depends_on:
            - mender-mongo
        labels:
            mender.healthcheck.path: "/api/internal/v1/inventory/health"

    #
    # mender-useradm
    #
    mender-useradm:
        image: mendersoftware/useradm:mender-3.4.0
        extends:
            file: common.yml
            service: mender-base
        networks:
            - mender
            - web
        depends_on:
            - mender-mongo
        labels:
            mender.healthcheck.path: "/api/internal/v1/useradm/health"

    #
    # mender-workflows-server
    #
    mender-workflows-server:
        image: mendersoftware/workflows:mender-3.4.0
        environment:
            WORKFLOWS_MONGO_URL: mongodb://mender-mongo:27017
        extends:
            file: common.yml
            service: mender-base
        networks:
            - mender
            - web
        depends_on:
            - mender-mongo
            - mender-nats
        labels:
            mender.healthcheck.path: "/health"

    #
    # mender-workflows-worker
    #
    mender-workflows-worker:
        image: mendersoftware/workflows-worker:mender-3.4.0
        command: worker --excluded-workflows generate_artifact
        environment:
            WORKFLOWS_MONGO_URL: mongodb://mender-mongo:27017
            DEVICECONNECT_ADDR: "mender-deviceconnect:8080"
            HAVE_DEVICECONNECT: 1
            HAVE_DEVICECONFIG: 1
            DEVICECONFIG_ADDR: "mender-deviceconfig:8080"
        extends:
            file: common.yml
            service: mender-base
        networks:
            - mender
            - web
        depends_on:
            - mender-mongo
            - mender-nats

    #
    # mender-create-artifact-worker
    #
    mender-create-artifact-worker:
        image: mendersoftware/create-artifact-worker:mender-3.4.0
        extends:
            file: common.yml
            service: mender-base
        environment:
            - WORKFLOWS_MONGO_URL=mongodb://mender-mongo:27017
            - CREATE_ARTIFACT_GATEWAY_URL=https://mender-api-gateway
            - CREATE_ARTIFACT_DEPLOYMENTS_URL=http://mender-deployments:8080
        networks:
            - mender
            - web
        depends_on:
            - mender-mongo
            - mender-nats

    #
    # mender-deviceconnect
    #
    mender-deviceconnect:
        image: mendersoftware/deviceconnect:mender-3.4.0
        command: server --automigrate
        extends:
            file: common.yml
            service: mender-base
        networks:
            - mender
            - web
        depends_on:
            - mender-mongo
            - mender-nats
        environment:
            DEVICECONNECT_MONGO_URL: "mongodb://mender-mongo"
            DEVICECONNECT_NATS_URI: "nats://mender-nats:4222"
        labels:
            mender.healthcheck.path: "/api/internal/v1/deviceconnect/health"

    #
    # mender-deviceconfig
    #
    mender-deviceconfig:
        image: mendersoftware/deviceconfig:mender-3.4.0
        extends:
            file: common.yml
            service: mender-base
        networks:
            - mender
            - web
        depends_on:
            - mender-mongo
        command: server --automigrate
        labels:
            mender.healthcheck.path: "/api/internal/v1/deviceconfig/health"

    mender-mongo:
        image: mongo:4.4
        extends:
            file: common.yml
            service: mender-base
        networks:
            web:
            mender:
                aliases:
                    - mongo-tenantadm
                    - mongo-deployments
                    - mongo-device-auth
                    - mongo-inventory
                    - mongo-useradm
                    - mongo-workflows

    mender-nats:
        image: nats:2.6-alpine
        command: -js
        networks:
            - mender
            - web
    mongodb:
        restart: always
        container_name: mongodb
        image: mongo:4.4.6
        tty: true
        env_file:
            - .env
        volumes:
            # mongodb data-directory - A must for data persistence
            - ../meshcentral/mongodb_data:/data/db
        expose:
            - 27017
        networks:
            - meshcentral-tier
            - web
    meshcentral:
        restart: always
        container_name: meshcentral
        # use the official meshcentral container
        image: ghcr.io/ylianst/meshcentral:latest
        depends_on:
            - mongodb
        ports:
            - 4430:4430
        volumes: # The volumes will be created automaticly if they do not exists. The only directory that should exist when installing fresh is is meshcentral/data
              # config.json and other important files live here. A must for data persistence
            - ../meshcentral/data:/opt/meshcentral/meshcentral-data
             # where file uploads for users live
            - ../meshcentral/user_files:/opt/meshcentral/meshcentral-files
              # location for the meshcentral-backups - this should be mounted to an external storage
            - ../meshcentral/backup:/opt/meshcentral/meshcentral-backup
              # location for site customization files
            - ../meshcentral/web:/opt/meshcentral/meshcentral-web
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.meshcentral.entrypoints=https"
            - "traefik.http.routers.meshcentral.middlewares=redirect-sobename-sobeworld,default@file"
            - "traefik.http.routers.meshcentral.rule=Host(`mesh.sobe.name`)"
            - "traefik.http.routers.meshcentral.tls.certresolver=letsEncrypt"
            - "traefik.http.routers.meshcentral.tls.options=intermediate@file"
            - "traefik.http.routers.meshcentral.tls=true"
            - "traefik.http.services.meshcentral.loadbalancer.server.port=4430"
            - "traefik.http.services.meshcentral.loadbalancer.sticky.cookie.httpOnly=true"
            - "traefik.http.services.meshcentral.loadbalancer.sticky.cookie.secure=true"
        networks:
            - meshcentral-tier
            - web


networks:
    mender: null
    web:
        external: true
    meshcentral-tier:
        driver: bridge
